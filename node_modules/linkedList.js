"use strict"

function LinkedList(){
	var length = 0;
	var head = null;

	// 
	var Node = function(element){
		this.element = element;
		this.next = null;
	}

	// --------------------------
	this.append = function(element){
		var node = new Node(element);
		var	current;//临时节点
		// 列表中第一个节点
		if(head === null){
			head = node;
		}else{
			current = head;
			// 循环列表，直到找到最后一项
			while(current.next){
				current = current.next;
			}
			// 找到最后一项，将其next赋为node，建立链接
			current.next = node;
		}
		length++;
	};

	this.insert = function(position, element){
		if(position >= 0 && position <= length){
			var node = new Node(element);
			var current = head;
			var previous;
			var index = 0;

			if(position === 0){
				node.next = current;
				head = node;
			}else{
				while(index++ < position){
					previous = current;
					current = current.next;
				}

				node.next = current;
				previous.next = node;
			}
			length++;
			return true;
		}else{
			return false;
		}
	};

	this.removeAt = function(position){
		// 检查越界值
		if(position > -1 && position < length){
			var current = head;
			var previous;
			var index = 0;
			//移除第一项
			if(position === 0){
				head = current.next;
			}else{
				while(index++ < position){
					previous = current;
					current = current.next;
				}
				//将previous与current的下一项链接起来：跳过current，从而移除它
				previous.next = current.next;
			}
			length--;
			return current.element;
		}else{
			return null;
		}
	};

	this.remove = function(element){
		var index = this.indexOf(element);
		return this.removeAt(index);
	};

	this.indexOf = function(element){
		var current = head;
		var index = -1;

		while(current){
			if(element === current.element){
				break;
			}
			index++;

			current = current.next;
		}

		return index;
	};

	this.isEmpty = function(){
		return length === 0;
	};

	this.size = function(){
		return length;
	};

	this.getHead = function(){
		return head;
	};

	this.toString = function(){
		var current = head;
		var string = '';

		while(current){
			string += current.element + '->';
			current = current.next;
		}

		return string;
	};
}

module.exports = LinkedList;



