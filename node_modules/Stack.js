"use strict"

// 栈是一种后进先出的数据结构
function Stack(){
	var items = [];

	this.push = function(element){
		items.push(element);
	};

	this.pop = function(element){
		return items.pop();
	};

	this.peek = function(){
		return items[items.length - 1];
	};

	this.isEmpty = function(){
		return items.length == 0;
	};

	this.size = function(){
		return items.length;
	};

	this.clear = function(){
		items = [];
	};

	this.printf = function(){
		console.log("------printf begin------");
		console.log(items);
		console.log("------printf end--------");
	};

	this.format = function(formatStr){
		return items.join(formatStr);
	}
}


function baseConverter(decNumber, base){
	var remStack = new Stack(),
		binaryStr = '',
		digits = '0123456789ABCDEF';
	if(base == null || base == undefined){
		base = 2;
	}
 	// 
	while(decNumber > 0){
		remStack.push(Math.floor(decNumber % base));
		decNumber = Math.floor(decNumber / base);
	}
	//
	while(!remStack.isEmpty()){
		binaryStr += digits[remStack.pop()];
	}

	return binaryStr;
}

module.exports = Stack;
module.exports = baseConverter;

