"use strict"

exports.Set = function(){
	var items = {};


	this.has = function(value){
		// return value in items;
		return items.hasOwnProperty(value);
	};

	this.add = function(value){
		if(!this.has(value)){
			items[value] = value;
			return true;
		}else{
			return false;
		}
	};

	this.remove = function(value){
		if(this.has(value)){
			delete items[value];
			return true;
		}else{
			return false;
		}
	}

	this.clear = function(){
		items = {};
	};

	this.size = function(){
		return Object.keys(items).length;
	};

	this.sizeLegacy = function(){
		var count = 0;
		for(var prop in items){
			if(items.has(prop)){
				++count;
			}
		}
		return count;
	}

	this.values = function(){
		return Object.keys(items);
	};

	this.valuesLegacy = function(){
		var keys = [];
		for(var key in items){
			keys.push(key);
		}
		return keys;
	};


	this.union = function(otherSet){
		var unionSet = new Set();

		var values = this.values();

		for(var value in values){
			unionSet.add(value);
		}

		// if(!otherSet){
		values = otherSet.values();
		for(var value in values){
			unionSet.add(value);
		}
		// }

		return unionSet;
	};
    this.intersection = function(otherSet) {
        var intersectionSet = new Set();
        if (otherSet && otherSet instanceof Set) {
            var values = this.values();
            for (var i = 0; i < values.length; i++) {
                if (otherSet.has(values[i])) {
                    intersectionSet.add(values[i]);
                }
            }
        }
        return intersectionSet;
    };

    this.difference = function(otherSet){
    	var differenceSet = new Set();

    	if(otherSet && otherSet instanceof Set){
	    	var values = this.values();
	    	for(var i = 0; i < values; i++){
	    		if(!otherSet.has(values[i])){
	    			differenceSet.add(values[i]);
	    		}
	    	}
    	}

    	return differenceSet;
    };

    this.subSet = function(otherSet){
    	if(!otherSet instanceof Set || this.size() > otherSet.size()){
    		return false;
    	}else{
    		var values = this.values();
    		for(var i = 0; i < values.length; i++){
    			if(!otherSet.has(values[i])){
    				return false;
    			}
    		}
    		return true;
    	}
    };

}